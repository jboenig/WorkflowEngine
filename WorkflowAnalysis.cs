////////////////////////////////////////////////////////////////////////////////
// The MIT License(MIT)
// Copyright(c) 2020 Jeff Boenig
// This file is part of Headway.WorkflowEngine
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
////////////////////////////////////////////////////////////////////////////////

using Headway.WorkflowEngine.Exceptions;

namespace Headway.WorkflowEngine;

/// <summary>
/// Encapsulates information about a workflow that is generated by calling
/// the <see cref="Workflow.Analyze()"/> method, which looks for consistency
/// errors and gathers counts on the number of nodes in the workflow.
/// </summary>
public sealed class WorkflowAnalysis
{
    private readonly List<WorkflowException> errors = new List<WorkflowException>();

    /// <summary>
    /// Default constructor.
    /// </summary>
    internal WorkflowAnalysis()
    {
    }

    /// <summary>
    /// Gets the number of states in the workflow.
    /// </summary>
    public int StateCount
    {
        get;
        internal set;
    }

    /// <summary>
    /// Gets the number of transitions in the workflow.
    /// </summary>
    public int TransitionCount
    {
        get;
        internal set;
    }

    /// <summary>
    /// Gets the collection of errors found in the workflow
    /// during analysis.
    /// </summary>
    public IEnumerable<WorkflowException> Errors
    {
        get { return this.errors; }
    }

    /// <summary>
    /// Gets a flag indicating whether or not the analysis
    /// unconvered any errors in the workflow.
    /// </summary>
    public bool HasErrors
    {
        get { return (this.errors.Count > 0); }
    }

    internal void AddError(WorkflowException error)
    {
        this.errors.Add(error);
    }
}
