////////////////////////////////////////////////////////////////////////////////
// Copyright 2019 Jeff Boenig
//
// This file is part of Headway.WorkflowEngine.
//
// Headway.WorkflowEngine is free software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// Headway.WorkflowEngine is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with Headway.WorkflowEngine. If not, see http://www.gnu.org/licenses/.
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

using Headway.WorkflowEngine.Exceptions;

namespace Headway.WorkflowEngine
{
    /// <summary>
    /// Encapsulates information about a workflow that is generated by calling
    /// the <see cref="Workflow.Analyze"/> method, which looks for consistency
    /// errors and gathers counts on the number of nodes in the workflow.
    /// </summary>
    public sealed class WorkflowAnalysis
    {
        private List<WorkflowException> errors = new List<WorkflowException>();

        /// <summary>
        /// Default constructor.
        /// </summary>
        internal WorkflowAnalysis()
        {
        }

        /// <summary>
        /// Gets the number of states in the workflow.
        /// </summary>
        public int StateCount
        {
            get;
            internal set;
        }

        /// <summary>
        /// Gets the number of transitions in the workflow.
        /// </summary>
        public int TransitionCount
        {
            get;
            internal set;
        }

        /// <summary>
        /// Gets the collection of errors found in the workflow
        /// during analysis.
        /// </summary>
        public IEnumerable<WorkflowException> Errors
        {
            get { return this.errors; }
        }

        /// <summary>
        /// Gets a flag indicating whether or not the analysis
        /// unconvered any errors in the workflow.
        /// </summary>
        public bool HasErrors
        {
            get { return (this.errors.Count > 0); }
        }

        internal void AddError(WorkflowException error)
        {
            this.errors.Add(error);
        }
    }
}
